import os
import hashlib
import json
from flask import Flask, request, jsonify
from flask_cors import CORS


app  = Flask(__name__)
CORS(app)

HASHES_FILE = "files_hashes.json"

def calculate_file_hash(file_path):
    hasher = hashlib.sha256()
    with open(file_path, 'rb') as f:
        while True:
            chunk = f.read(4096)
            if not chunk:
                break
            hasher.update((chunk))
    return hasher.hexdigest()


def scan_directory(directory):
    file_hashes = {}
    
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_hash = calculate_file_hash(file_path)
            if root not in file_hashes:
                file_hashes[root] = {}
            file_hashes[root][file] = file_hash
    return file_hashes

def save_hashes_to_file(hashes):
    with open(HASHES_FILE, "w") as f:
        json.dump(hashes, f) 
        
        
def load_hashes_from_file():
    if os.path.exists(HASHES_FILE):
        with open(HASHES_FILE, "r") as f:
            return json.load(f)
    else:
        return {}
    
    
def compare_hashes(saved_hashes, current_hashes):
    changed_files = []
    new_folders = []
    for folder, files in current_hashes.items():
        if folder in saved_hashes:
            for file, hash_value in files.items():
                if file in saved_hashes[folder] and hash_value != saved_hashes[folder][file]:
                    changed_files.append(os.path.join(folder, file))
        else:
            new_folders.append(folder)
    return changed_files, new_folders 

@app.route('/scan', methods= ['POST'])
def scan_api():
    data = request.get_json()
    directory_to_scan = data.get('directory')
    
    if not os.path.isdir(directory_to_scan):
        return jsonify({'error': 'Invalid directory'}), 400
    
    current_hashes = scan_directory(directory_to_scan)
    saved_hashes = load_hashes_from_file()
    
    if not saved_hashes:
        save_hashes_to_file(current_hashes)
        return jsonify({'message': 'Hashes saved successfully'}), 200
    
    changed_files, new_folders = compare_hashes(saved_hashes, current_hashes)
    if changed_files or new_folders:
        return jsonify({'changed_files': changed_files, 'new_folders': new_folders})
    else:
        return jsonify({'message': 'All Files have the same hash. no Changes detected'}), 200
    
    
if __name__ == '__main__':
    app.run(debug=True)                                   
                              